{"ast":null,"code":"/**\n * @author Mugen87 / https://github.com/Mugen87\n */\n\n(function () {\n  // ConvexGeometry\n\n  function ConvexGeometry(points) {\n    THREE.Geometry.call(this);\n    this.fromBufferGeometry(new ConvexBufferGeometry(points));\n    this.mergeVertices();\n  }\n  ConvexGeometry.prototype = Object.create(THREE.Geometry.prototype);\n  ConvexGeometry.prototype.constructor = ConvexGeometry;\n\n  // ConvexBufferGeometry\n\n  function ConvexBufferGeometry(points) {\n    THREE.BufferGeometry.call(this);\n\n    // buffers\n\n    var vertices = [];\n    var normals = [];\n\n    // execute QuickHull\n\n    if (THREE.QuickHull === undefined) {\n      console.error('THREE.ConvexBufferGeometry: ConvexBufferGeometry relies on THREE.QuickHull');\n    }\n    var quickHull = new THREE.QuickHull().setFromPoints(points);\n\n    // generate vertices and normals\n\n    var faces = quickHull.faces;\n    for (var i = 0; i < faces.length; i++) {\n      var face = faces[i];\n      var edge = face.edge;\n\n      // we move along a doubly-connected edge list to access all face points (see HalfEdge docs)\n\n      do {\n        var point = edge.head().point;\n        vertices.push(point.x, point.y, point.z);\n        normals.push(face.normal.x, face.normal.y, face.normal.z);\n        edge = edge.next;\n      } while (edge !== face.edge);\n    }\n\n    // build geometry\n\n    this.addAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));\n    this.addAttribute('normal', new THREE.Float32BufferAttribute(normals, 3));\n  }\n  ConvexBufferGeometry.prototype = Object.create(THREE.BufferGeometry.prototype);\n  ConvexBufferGeometry.prototype.constructor = ConvexBufferGeometry;\n\n  // export\n\n  THREE.ConvexGeometry = ConvexGeometry;\n  THREE.ConvexBufferGeometry = ConvexBufferGeometry;\n})();","map":null,"metadata":{},"sourceType":"script"}